<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        <record id="action_update_prod_attr_val" model="ir.actions.server">
            <field name="name">Update Product Attributes</field>
            <field name="type">ir.actions.server</field>
            <field name="model_id" ref="product.model_product_attribute_value"/>
            <field name="binding_model_id" ref="product.model_product_attribute_value"/>
            <field name="state">code</field>
            <field name="code">
# All attribute value selected(ex:cotton)
for r in records:
  if r.attribute_value_ids:
    tmpl_attr = {}
    # create a dict of attributes+values for product.template
    for sub in r.attribute_value_ids:
      if tmpl_attr.get(sub.attribute_id.id, False):
        tmpl_attr[sub.attribute_id.id].append(sub.id)
      else:
        tmpl_attr[sub.attribute_id.id] = [sub.id]
    # All attribute lines with current attribute value(r)
    attr_lines = env['product.template.attribute.line'].search([['value_ids','in', r.id]])
    # prefetching exclusion env
    combination_exclude = env['product.template.attribute.exclusion']

    # Add the sub attr val to the current attribute value(r)
    for line in attr_lines:
      prod = line.product_tmpl_id
      for key in tmpl_attr.keys():
        exist = [v for v in prod.attribute_line_ids if key == v.attribute_id.id]
        if exist:
          for sub_id in tmpl_attr[key]:
            exist[0].write({'value_ids':[(4,sub_id,0)]})
        else:
          val = [(4,s,0) for s in tmpl_attr[key]]
          prod.write({
            'attribute_line_ids':[(0,0,{
                                        'product_tmpl_id': prod.id,
                                        'attribute_id': key,
                                        'value_ids': val,
                                 })]
          })
      prod.create_variant_ids()

      #product.template.attribute.value on current product.template that ARE attribute(fabric) and NOT current attribute(poly) > should only be cotton
      need_exclusion = env['product.template.attribute.value'].search([['product_tmpl_id', '=', prod.id], ['attribute_id', '=', r.attribute_id.id], ['product_attribute_value_id', '!=', r.id]])
      #product.template.attribute.value on current product.template that are of the same attribute as those in the sub attributes.
      possible_exclusion = env['product.template.attribute.value'].search([['product_tmpl_id', '=', prod.id], ['attribute_id', 'in', list(tmpl_attr.keys())]])

      #product.template.attribute.values which need exclusion
      for need in need_exclusion:
        #product.template.attribute.values that might need to be excluded
        for ex in possible_exclusion:
          #if not sub attributes of the need
          if ex.product_attribute_value_id not in need.product_attribute_value_id.attribute_value_ids:
            has_tmpl_line = [t for t in need.exclude_for if t.product_tmpl_id == need.product_tmpl_id]
            if has_tmpl_line:
              need.write({
                    'exclude_for': [(1,has_tmpl_line[0].id, {
                        'product_tmpl_id': need.product_tmpl_id.id,
                        'value_ids': [(4,ex.id,0)]
                    })]
              })
            #create exclusion line with current template
            else:
              need.write({
                'exclude_for': [(0,0, {
                    'product_tmpl_id': need.product_tmpl_id.id,
                    'value_ids': [(4,ex.id,0)]
                })]
              })
            # Handle reverse exclusion
            rev_has_tmpl_line = [t for t in ex.exclude_for if t.product_tmpl_id == ex.product_tmpl_id]
            if rev_has_tmpl_line:
              ex.write({
                    'exclude_for': [(1,rev_has_tmpl_line[0].id, {
                        'product_tmpl_id': ex.product_tmpl_id.id,
                        'value_ids': [(4,need.id,0)]
                    })]
              })
            else:
              ex.write({
                'exclude_for': [(0,0, {
                    'product_tmpl_id': ex.product_tmpl_id.id,
                    'value_ids': [(4,need.id,0)]
                })]
              })
      # Set exclusion boolean on the product variant if attribute values align
      cur_var = prod.product_variant_ids
      for var in cur_var:
        values_ids = var.product_template_attribute_value_ids
        domain = [('product_template_attribute_value_id', 'in', values_ids.ids), ('value_ids', 'in', values_ids.ids), ('product_tmpl_id', '=', prod.id)]
        is_ex = combination_exclude.search(domain)
        if is_ex:
          var.write({'is_exclude': True})
            </field>
        </record>

        <record id="automated_action_update_is_exclusion_luonto" model="ir.cron">
            <field name="name">Product: Update Exclusion Boolean</field>
            <field name="model_id" ref="product.model_product_product"/>
            <field name="state">code</field>
            <field name="code">combination_exclude = env['product.template.attribute.exclusion']
for record in env['product.product'].search([]):
  tmpl_id = record.product_tmpl_id
  values_ids = record.product_template_attribute_value_ids
  domain = [('product_template_attribute_value_id', 'in', values_ids.ids), ('value_ids', 'in', values_ids.ids), ('product_tmpl_id', '=', tmpl_id.id)]
  is_ex = combination_exclude.search(domain)
  if is_ex:
    record['is_exclude'] = True
  else:
    record['is_exclude'] = False
            </field>
            <field name="interval_number">2</field>
            <field name="interval_type">weeks</field>
            <field name="numbercall">-1</field>
            <field name="nextcall" eval="(DateTime.now() + timedelta(days=14)).strftime('%Y-%m-%d 2:00:00')" />
            <field name="doall" eval="False"/>
        </record>
    </data>
</odoo>